package libClases;

public class Cliente implements Cloneable, Proceso{
	
	private static int contador = 1;
	
	private final String nif; //final = const -> inmutable
	private final int codCliente;
	private String nombre;
	private final Fecha fechaNac;
	private final Fecha fechaAlta;
	
	private final static Fecha FechaDefecto = new Fecha(1,1,2018);
			
	//CONSTRUCTORES:
	
	public Cliente(String nif, String nom, Fecha fNac, Fecha fAlta) {
		this.nif = nif;
		this.nombre = nom;
		this.fechaNac = fNac;
		this.fechaAlta = fAlta;
		this.codCliente = contador ++;
	}
	
	public Cliente (String nif, String nom, Fecha fNac) {
		Fecha fAlta = new Fecha(01,01,2018);
		this.nif = nif;
		this.nombre = nom;
		this.fechaNac = fNac;
		this.fechaAlta = fAlta;
		this.codCliente = contador ++;
	}

	public Cliente(Cliente c1) {
		this.nif = c1.nif;
		this.nombre = c1.nombre;
		this.fechaNac = c1.fechaNac;
		this.fechaAlta = c1.fechaAlta;
		this.codCliente = c1.codCliente;
	}
	
	/*public void setCliente(String nif, String nom, Fecha fNac, Fecha fAlta) {
		this.nif = nif;
		this.nombre = nom;
		this.fechaNac = fNac;
		this.fechaAlta = fAlta;
		this.codCliente = contador ++;
	}*/

	/*static {
		//este bloque de codigo solo se
		//ejecuta una vez cuando se cree
		//el primer objeto Cliente o se
		//invoque el 1er método estatico
		System.out.println("Primero!!");
	}*/
	
	//public String toString();
	
	
	//ATRIBUTO NIF:
	//getNombreAtributo( ) y setNombreAtributo( )
	public String getNIF( ){
		return this.nif;
	}
	
	//ATRIBUTO NOMBRE:
	//getNombreAtributo( ) y setNombreAtributo( )
	public String getNombre( ){
		return this.nombre;
	}
	
	public void setNombre(String nombre){
		this.nombre=nombre;
	}

	public static Fecha getFechaPorDefecto() {
		Fecha defecto = new Fecha(1,1,2018);
		return defecto;
	}
	
	public Object clone() {
		Object obj=null;
		try {
			obj=super.clone(); //se llama al clone() de la clase base (Object)
								//que hace copia binaria de los atributos
		} catch(CloneNotSupportedException ex) {
			System.out.println(" no se puede duplicar");
		}
		return obj;
	}
	
	public Fecha getFechaNac() {
		return this.fechaNac;
	}
	
	public Fecha getFechaAlta() {
		return this.fechaAlta;
	}
	
	public void setFechaAlta(Fecha fAlta) {
		fechaAlta.setFecha(fAlta);
	}
	
	public void ver() {
		System.out.println(this/*.toString()*/);
	}

	public static void setFechaPorDefecto(Fecha f) {
		FechaDefecto.setFecha(f);
	}

	public Fecha getFechaDefecto() {
		return FechaDefecto;
	}

	public String getNif() {
		return this.nif;
	}
}
